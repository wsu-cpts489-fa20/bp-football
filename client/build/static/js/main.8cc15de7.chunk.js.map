{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/FloatingButton.js","components/CoursesTable.js","components/CoursesPage.js","components/AboutBox.js","components/Draft.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","openDraft","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","phoneNumber","teamName","leagueID","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","googleIcon","googleLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","games","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","CoursesTable","league","users","win","loss","CoursesPage","LeagueName","AboutBox","textAlign","href","DraftPage","parseOptions","console","log","onFileLoaded","label","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","showDraftDialog","closeDraft","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Draft","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cc15de7.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\"\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode != AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className=\"navbar\">  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\n      width=\"38px\" />\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport AppMode from \"./../AppMode.js\";\n\nclass SideMenu extends React.Component {\n  //renderModeItems -- Renders correct subset of mode menu items based on\n  //current mode, which is stored in this.prop.mode. Uses switch statement to\n  //determine mode.\n  renderModeMenuItems = () => {\n    switch (this.props.mode) {\n      case AppMode.FEED:\n        return (\n          <div>\n            <a className=\"sidemenu-item\">\n              <span className=\"fa fa-users\"></span>&nbsp;Followed Users\n            </a>\n            <a className=\"sidemenu-item \">\n              <span className=\"fa fa-search\"></span>&nbsp;Search Feed\n            </a>\n          </div>\n        );\n        break;\n      case AppMode.ROUNDS:\n        return (\n          <div>\n            <a className=\"sidemenu-item\">\n              <span className=\"fa fa-plus\"></span>&nbsp;Log New Round\n            </a>\n            <a className=\"sidemenu-item\">\n              <span className=\"fa fa-search\"></span>&nbsp;Search Rounds\n            </a>\n          </div>\n        );\n        break;\n      case AppMode.COURSES:\n        return (\n          <div>\n            <a className=\"sidemenu-item\">\n              <span className=\"fa fa-plus\"></span>&nbsp;Add a Course\n            </a>\n            <a className=\"sidemenu-item\">\n              <span className=\"fa fa-search\"></span>&nbsp;Search Courses\n            </a>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className={\n          \"sidemenu \" +\n          (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")\n        }\n        onClick={this.props.toggleMenuOpen}\n      >\n        {/* SIDE MENU TITLE */}\n        <div className=\"sidemenu-title\">\n          <img src={this.props.profilePicURL} height=\"60\" width=\"60\" />\n          <span id=\"userID\" className=\"sidemenu-userID\">\n            &nbsp;{this.props.displayName}\n          </span>\n        </div>\n        {/* MENU CONTENT */}\n        {/* {this.renderModeMenuItems()} */}\n        {/* The following menu items are present regardless of mode */}\n        {this.props.localAccount ? (\n          <a\n            id=\"accountBtn\"\n            className=\"sidemenu-item\"\n            onClick={this.props.editAccount}\n          >\n            <span className=\"fa fa-user\"></span>&nbsp;Account\n          </a>\n        ) : null}\n        <a onClick={this.props.openDraft}>\n          <span>Create League</span>\n        </a>\n\n        <a\n          id=\"aboutBtn\"\n          className=\"sidemenu-item\"\n          onClick={this.props.showAbout}\n        >\n          <span className=\"fa fa-info-circle\"></span>&nbsp;About\n        </a>\n        <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n          <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out\n        </a>\n        {/*Todo: if user is a commissioner, have a 'draft' option */}\n      </div>\n    );\n  }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-th-list\"></span>\n          <span className=\"modebar-text\">Feed</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon  fa fa-history\"></span>\n          <span className=\"modebar-text\">Games</span>\n        </a>\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">MyLeague</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","import React from 'react';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                      password: \"\",\n                      passwordRepeat: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      phoneNumber: \"\",\n                      teamName: \"\",\n                      leagueID: \"\", //holding league id for each user\n                      formUpdated: false,\n                      confirmDelete: false};\n    } \n\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = \"/users/\" + this.props.userId;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({accountName: this.props.userId,\n                           displayName: userData.displayName,\n                           profilePicURL: userData.profilePicURL,\n                           password: userData.password,\n                           passwordRepeat: userData.password,\n                           securityQuestion: userData.securityQuestion,\n                           securityAnswer: userData.securityAnswer,\n                           phoneNumber: userData.phoneNumber,\n                           teamName: userData.teamName,\n                           leagueID: userData.leagueID}); \n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        if (updateField != \"phoneNumber\" &&\n            this.state.phoneNumber !== this.origAccountInfo.phoneNumber)\n            {return true;}\n        if (updateField != \"teamName\" &&\n            this.state.teamName !== this.origAccountInfo.teamName)\n            {return true;}\n        if (updateField != \"leagueID\" &&\n            this.state.leagueID !== this.origAccountInfo.leagueID)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        //Initialize user account\n        let userData = {\n            displayName: this.state.displayName,\n            password: this.state.password,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer,\n            phoneNumber: this.state.phoneNumber,\n            teamName: this.state.teamName,\n            leagueID: this.state.leagueID\n        };\n        const url = '/users/' + this.state.accountName;\n        let res;\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was succesful, false otherwise.\n    deleteAccount = async() => {\n       const url = '/users/' + this.state.accountName;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Email: \n                <input  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Phone Number:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"phoneNumber\"\n                type=\"text\"\n                size=\"35\"\n                placeholder=\"Phone Number\"\n                required={true}\n                value={this.state.phoneNumber}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Team Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"teamName\"\n                type=\"text\"\n                placeholder=\"Team Name\"\n                size=\"35\"\n                required={true}\n                value={this.state.teamName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <br/>\n            <label>\n                League ID:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"leagueID\"\n                type=\"text\"\n                placeholder=\"Enter 0 if not yet in a league\"\n                size=\"35\"\n                required={true}\n                value={this.state.leagueID}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName}\n                                deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}\n         /> : null}\n    </div>\n    );\n}\n}\n\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  googleIcon: \"fa fa-google\",\n                  googleLabel: \"Sign in with Google\",\n                  loginMsg: \"\",\n                  newAccountCreated: false\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div>\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <button type=\"button\" className=\"btn btn-google\"\n                onClick={() => this.handleOAuthLoginClick(\"google\")}>\n                    <span className={this.state.googleIcon}></span>&nbsp;\n                    {this.state.googleLabel}\n            </button>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\n\nclass FeedPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Activity Feed</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from \"react\";\nimport ConfirmDeleteRound from \"./ConfirmDeleteRound.js\";\nimport AppMode from \"./../AppMode.js\";\n\nclass RoundsTable extends React.Component {\n  constructor() {\n    super();\n    this.state = { showConfirmDelete: false };\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  };\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  //ToDo: dont need delete anymore\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({ showConfirmDelete: false });\n  };\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that\n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  //ToDo: dont need delete anymore\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({ showConfirmDelete: true });\n  };\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  //ToDo: populate table with game information instead of round info\n  renderTable = () => {\n    let table = [];\n    for (let r = 0; r < this.props.games.length; ++r) {\n      table.push(\n        <tr key={r}>\n          <td>{this.props.rounds[r].date.substring(0, 10)}</td>\n          <td>{this.props.rounds[r].course}</td>\n          <td>\n            {Number(this.props.rounds[r].strokes) +\n              Number(this.props.rounds[r].minutes) +\n              \":\" +\n              (this.props.rounds[r].seconds < 10\n                ? \"0\" + this.props.rounds[r].seconds\n                : this.props.rounds[r].seconds) +\n              \" (\" +\n              this.props.rounds[r].strokes +\n              \" in \" +\n              this.props.rounds[r].minutes +\n              \":\" +\n              (this.props.rounds[r].seconds < 10\n                ? \"0\" + this.props.rounds[r].seconds\n                : this.props.rounds[r].seconds) +\n              \")\"}\n          </td>\n        </tr>\n      );\n    }\n    return table;\n  };\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  //ToDo: change table headers to match issue\n  render() {\n    return (\n      <div className=\"padded-page\">\n        <h1></h1>\n        <table className=\"table table-hover\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>Team Name</th>\n              <th>Match Up</th>\n              <th>History</th>\n              <th>League</th>\n              <th>Record</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(this.props.games).length === 0 ? (\n              <tr>\n                <td colSpan=\"5\" style={{ fontStyle: \"italic\" }}>\n                  No data to show\n                </td>\n              </tr>\n            ) : (\n              this.renderTable()\n            )}\n          </tbody>\n        </table>\n        {this.state.showConfirmDelete ? (\n          <ConfirmDeleteRound\n            close={() => this.setState({ showConfirmDelete: false })}\n            deleteRound={this.deleteRound}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        games={this.props.userObj.games}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    {/* <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} /> */}\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","import React from \"react\";\nimport AppMode from \"./../AppMode.js\";\n\nclass CoursesTable extends React.Component {\n  constructor() {\n    super();\n  }\n\n  //populates table with league information\n  renderTable = () => {\n    let table = [];\n    for (let r = 0; r < this.props.league.length; ++r) {\n      table.push(\n        <tr key={r}>\n          <td>{this.props.league[r].users.teamName}</td>\n          <td>{this.props.league[r].users.win}</td>\n          <td>{this.props.league[r].users.loss}</td>\n          <td>{this.props.league[r].users.displayName}</td>\n        </tr>\n      );\n    }\n    return table;\n  };\n\n  //populates the table with headers and data from rendertable\n  //if not in league will prompt to join one\n  render() {\n    return (\n      <div className=\"padded-page\">\n        <h1></h1>\n        <table className=\"table table-hover\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>Team Name</th>\n              <th>Wins</th>\n              <th>Losses</th>\n              <th>Display Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(this.props.league).length === 0 ? (\n              <tr>\n                <td colSpan=\"5\" style={{ fontStyle: \"italic\" }}>\n                  No data to show. Not in a league\n                </td>\n              </tr>\n            ) : (\n              this.renderTable()\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default CoursesTable;\n","import React from \"react\";\nimport CoursesTable from './CoursesTable';\nimport AppMode from './../AppMode.js';\n// THis now becomes \"Leage\" instead of Courses\nclass CoursesPage extends React.Component {\n\n  constructor() {\n    super();\n  }\n\n  //need to add a function that fills the table with current league data\n\n\n\n  render() {\n    return (\n      <div className=\"padded-page\">\n        <center>\n          <h1>League Page</h1>\n          <h2>{this.props.userObj.league.LeagueName}</h2>\n        </center>\n        <CoursesTable\n          league={this.props.userObj.league}\n          changeMode={this.props.changeMode}\n          menuOpen={this.props.menuOpen} />\n      </div>\n    );\n  }\n}\n\nexport default CoursesPage;\n","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About SpeedScore</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\n                height=\"200\" width=\"200\"/>\n                <h3>The World's First and Only Suite of Apps for\n                Speedgolf</h3>\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\n                &copy; 2017-20 The Professor of Speedgolf. All rights\n                reserved.\n                </p>\n                <div style={{textAlign: \"left\"}}>\n                <p>SpeedScore apps support</p>\n                <ul>\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\n                <li>tracking personal speedgolf rounds and sharing results\n                (<i>SpeedScore Track&reg;</i>)</li>\n                <li>finding speedgolf-friendly courses, booking tee times, and\n                paying to play speedgolf by the minute (<i>SpeedScore\n                Play&reg;</i>)</li>\n                </ul>\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\n                associate professor of computer science at Washington State\n                University and the <i>Professor of Speedgolf</i>, with support\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\n                <p>For more information on SpeedScore, visit <a\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\n                site</a>. For more information on speedgolf, visit <a\n                href=\"http://playspeedgolf.com\"\n                target=\"_blank\">playspeedgolf.com</a> and <a\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\n                USA</a>.</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from \"react\";\nimport CSVReader from \"react-csv-reader\";\nclass DraftPage extends React.Component {\n  parseOptions = () => {\n    console.log(\"parsed\");\n    //parse it\n  };\n\n  render() {\n    return (\n      //ToDo\n      // Parse .csv and populate a table of all available players.\n      // Create a form for: league name, some basic league settings, upload file button\n      // Upon submit, make that user a commissioner in the db\n      // Update user in database with players\n      <div className=\"padded-page\">\n        <button className=\"modal-close\" onClick={this.props.close}>\n          &times;\n        </button>\n        <center>\n          <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n            <center>\n              <label>\n                League Name:\n                <input\n                  name=\"leagueName\"\n                  className=\"form-control form-center\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                  placeholder=\"League Name\"\n                  size=\"50\"\n                  maxLength=\"50\"\n                />\n              </label>\n              <p></p>\n              <label>\n                Format:\n                <select\n                  name=\"format\"\n                  className=\"form-control form-center\"\n                  onChange={this.handleChange}\n                >\n                  <option value=\"full\">Full PPR</option>\n                  <option value=\"half\">Half PPR</option>\n                </select>\n              </label>\n              <p></p>\n              <CSVReader onFileLoaded={this.parseOptions} label=\"upload team\" />\n              <button\n                type=\"submit\"\n                style={{ width: \"70%\", fontSize: \"36px\" }}\n                className=\"btn btn-primary btn-color-theme\"\n              ></button>\n            </center>\n          </form>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default DraftPage;\n","import React from \"react\";\nimport NavBar from \"./NavBar.js\";\nimport SideMenu from \"./SideMenu.js\";\nimport ModeBar from \"./ModeBar.js\";\nimport CreateEditAccountDialog from \"./CreateEditAccountDialog.js\";\nimport LoginPage from \"./LoginPage.js\";\nimport AppMode from \"./../AppMode.js\";\nimport FeedPage from \"./FeedPage.js\";\nimport Rounds from \"./Rounds.js\";\nimport CoursesPage from \"./CoursesPage.js\";\nimport AboutBox from \"./AboutBox.js\";\nimport Draft from \"./Draft.js\";\n\nconst modeTitle = {};\nmodeTitle[AppMode.LOGIN] = \"Welcome to Fantasy Football\";\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\nmodeTitle[AppMode.ROUNDS] = \"My Game History\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Game\";\n//todo: remove ability to edit rounds\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\nmodeTitle[AppMode.COURSES] = \"My League Members\";\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = CoursesPage;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mode: AppMode.LOGIN,\n      menuOpen: false,\n      authenticated: false,\n      userObj: { displayName: \"\", profilePicURL: \"\" },\n      editAccount: false,\n      showEditAccountDialog: false,\n      statusMsg: \"\",\n      showAboutDialog: false,\n      showDraftDialog: false,\n    };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) {\n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.FEED, //We're authenticated so can get into the app.\n            });\n          }\n        });\n    }\n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in\n  //the database. The function calls the users/:userid (GET) route to update\n  //the userObj state var based on the latest database changes, and sets the\n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to\n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async (newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode,\n    });\n  };\n\n  handleChangeMode = (newMode) => {\n    this.setState({ mode: newMode });\n  };\n\n  openMenu = () => {\n    this.setState({ menuOpen: true });\n  };\n\n  closeMenu = () => {\n    this.setState({ menuOpen: false });\n  };\n\n  openDraft = () => {\n    this.setState({ showDraftDialog: true });\n  };\n\n  closeDraft = () => {\n    this.setState({ showDraftDialog: false });\n  };\n\n  toggleMenuOpen = () => {\n    this.setState((prevState) => ({ menuOpen: !prevState.menuOpen }));\n  };\n\n  setUserId = (Id) => {\n    this.setState({ userId: Id, authenticated: true });\n  };\n\n  showEditAccount = () => {\n    this.setState({ showEditAccountDialog: true });\n  };\n\n  cancelEditAccount = () => {\n    this.setState({ showEditAccountDialog: false });\n  };\n\n  //editAccountDone -- called after successful edit or\n  //deletion of user account. msg contains the status\n  //message and deleted indicates whether an account was\n  //edited (deleted == false) or deleted (deleted == true)\n  editAccountDone = (msg, deleted) => {\n    if (deleted) {\n      this.setState({\n        showEditAccountDialog: false,\n        statusMsg: msg,\n        mode: AppMode.LOGIN,\n      });\n    } else {\n      this.setState({ showEditAccountDialog: false, statusMsg: msg });\n    }\n  };\n\n  closeStatusMsg = () => {\n    this.setState({ statusMsg: \"\" });\n  };\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div className=\"padded-page\">\n        {this.state.showAboutDialog ? (\n          <AboutBox close={() => this.setState({ showAboutDialog: false })} />\n        ) : null}\n        {this.state.showDraftDialog ? <Draft close={this.closeDraft} /> : null}\n        {this.state.statusMsg != \"\" ? (\n          <div className=\"status-msg\">\n            <span>{this.state.statusMsg}</span>\n            <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n              <span className=\"fa fa-times\"></span>\n            </button>\n          </div>\n        ) : null}\n        {this.state.showEditAccountDialog ? (\n          <CreateEditAccountDialog\n            create={false}\n            userId={this.state.userObj.id}\n            done={this.editAccountDone}\n            cancel={this.cancelEditAccount}\n          />\n        ) : null}\n        <NavBar\n          title={modeTitle[this.state.mode]}\n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}\n        />\n        <SideMenu\n          menuOpen={this.state.menuOpen}\n          mode={this.state.mode}\n          toggleMenuOpen={this.toggleMenuOpen}\n          displayName={this.state.userObj.displayName}\n          profilePicURL={this.state.userObj.profilePicURL}\n          localAccount={this.state.userObj.authStrategy === \"local\"}\n          editAccount={this.showEditAccount}\n          logOut={() => this.handleChangeMode(AppMode.LOGIN)}\n          showAbout={() => {\n            this.setState({ showAboutDialog: true });\n          }}\n          openDraft={this.openDraft}\n        />\n        <ModeBar\n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n        />\n        <ModePage\n          menuOpen={this.state.menuOpen}\n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          userObj={this.state.userObj}\n          refreshOnUpdate={this.refreshOnUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}