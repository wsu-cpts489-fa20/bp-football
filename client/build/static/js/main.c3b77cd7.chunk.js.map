{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/FloatingButton.js","components/CoursesTable.js","components/CoursesPage.js","components/Draft.js","components/ProfilePage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","DRAFT","PROFILE","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","src","profilePicURL","displayName","changeMOde","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","phoneNumber","teamName","leagueID","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","Accept","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","googleIcon","googleLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","populateForm","componentDidMount","userObj","console","log","players","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","games","push","key","managerId","score","week","leagueId","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","strokes","minutes","seconds","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","Number","today","Date","now","getTimezoneOffset","date","toISOString","substr","course","holes","notes","thisRound","startData","max","Rounds","addRound","newData","refreshOnUpdate","rounds","editId","_id","deleteId","val","closeErrorMsg","CoursesTable","league","users","win","loss","CoursesPage","LeagueName","DraftPage","parseOptions","data","info","parsedata","playersData","fileInfo","addPlayers","leagueName","onFileLoaded","ProfilePage","modeTitle","modeToPage","Draft","App","newMode","handleChangeMode","openMenu","closeMenu","openDraft","showDraftDialog","closeDraft","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3b77cd7.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n  LOGIN: \"LoginMode\",\r\n  FEED: \"FeedMode\",\r\n  ROUNDS: \"RoundsMode\",\r\n  ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n  ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n  COURSES: \"CoursesMode\",\r\n  DRAFT: \"DraftMode\",\r\n  PROFILE: \"ProfileMode\",\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;\r\n","import React from \"react\";\r\nimport AppMode from \"../AppMode\";\r\n\r\nclass NavBar extends React.Component {\r\n  getMenuBtnIcon = () => {\r\n    if (\r\n      this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n      this.props.mode === AppMode.ROUNDS_EDITROUND\r\n    )\r\n      return \"fa fa-arrow-left\";\r\n    if (this.props.menuOpen) return \"fa fa-times\";\r\n    return \"fa fa-bars\";\r\n  };\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (\r\n      this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n      this.props.mode === AppMode.ROUNDS_EDITROUND\r\n    ) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <span className=\"navbar-items\">\r\n          <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n            <span\r\n              id=\"menuBtnIcon\"\r\n              className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}\r\n            ></span>\r\n          </button>\r\n          <img\r\n            // src=\"http://tiny.cc/fflogo\"\r\n            alt=\"Speed Score Logo\"\r\n            height=\"38px\"\r\n            width=\"38px\"\r\n          />\r\n          <span className=\"navbar-title\">&nbsp;{this.props.title}</span>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass SideMenu extends React.Component {\r\n  //renderModeItems -- Renders correct subset of mode menu items based on\r\n  //current mode, which is stored in this.prop.mode. Uses switch statement to\r\n  //determine mode.\r\n  renderModeMenuItems = () => {\r\n    switch (this.props.mode) {\r\n      case AppMode.FEED:\r\n        return (\r\n          <div>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-users\"></span>&nbsp;Followed Users\r\n            </a>\r\n            <a className=\"sidemenu-item \">\r\n              <span className=\"fa fa-search\"></span>&nbsp;Search Feed\r\n            </a>\r\n          </div>\r\n        );\r\n        break;\r\n      case AppMode.ROUNDS:\r\n        return (\r\n          <div>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-plus\"></span>&nbsp;Log New Round\r\n            </a>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-search\"></span>&nbsp;Search Rounds\r\n            </a>\r\n          </div>\r\n        );\r\n        break;\r\n      case AppMode.COURSES:\r\n        return (\r\n          <div>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-plus\"></span>&nbsp;Add a Course\r\n            </a>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-search\"></span>&nbsp;Search Courses\r\n            </a>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          \"sidemenu \" +\r\n          (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")\r\n        }\r\n        onClick={this.props.toggleMenuOpen}\r\n      >\r\n        {/* SIDE MENU TITLE */}\r\n        <div className=\"sidemenu-title\">\r\n          <img src={this.props.profilePicURL} height=\"60\" width=\"60\" />\r\n          <span id=\"userID\" className=\"sidemenu-userID\">\r\n            &nbsp;{this.props.displayName}\r\n          </span>\r\n        </div>\r\n        {/* MENU CONTENT */}\r\n        {/* {this.renderModeMenuItems()} */}\r\n        {/* The following menu items are present regardless of mode */}\r\n        <a\r\n          id=\"profileBtn\"\r\n          className=\"sidemenu-item\"\r\n          onClick={() => this.props.changeMOde(AppMode.PROFILE)}\r\n        >\r\n          <span className=\"fa fa-info-circle\"></span>&nbsp;Profile\r\n        </a>\r\n        {this.props.localAccount ? (\r\n          <a\r\n            id=\"accountBtn\"\r\n            className=\"sidemenu-item\"\r\n            onClick={this.props.editAccount}\r\n          >\r\n            <span className=\"fa fa-user\"></span>&nbsp;Edit Account\r\n          </a>\r\n        ) : null}\r\n        <a\r\n          id=\"draftBtn\"\r\n          className=\"sidemenu-item\"\r\n          onClick={() => this.props.changeMode(AppMode.DRAFT)}\r\n        >\r\n          <span></span>&nbsp;Create League\r\n        </a>\r\n\r\n        <a\r\n          id=\"aboutBtn\"\r\n          className=\"sidemenu-item\"\r\n          onClick={this.props.showAbout}\r\n        >\r\n          <span className=\"fa fa-info-circle\"></span>&nbsp;About\r\n        </a>\r\n        <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n          <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out\r\n        </a>\r\n        {/*Todo: if user is a commissioner, have a 'League Setting' option? */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">My Team</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Games</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">My League</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from \"react\";\r\nimport ConfirmDeleteAccount from \"./ConfirmDeleteAccount.js\";\r\nimport confirmDeleteAccount from \"./ConfirmDeleteAccount.js\";\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.origAccountInfo = null;\r\n    //Create a ref for the email input DOM element\r\n    this.newUserRef = React.createRef();\r\n    this.repeatPassRef = React.createRef();\r\n    this.profilePicRef = React.createRef();\r\n    this.state = {\r\n      accountName: \"\",\r\n      displayName: \"\",\r\n      profilePicURL:\r\n        \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n      password: \"\",\r\n      passwordRepeat: \"\",\r\n      securityQuestion: \"\",\r\n      securityAnswer: \"\",\r\n      phoneNumber: \"\",\r\n      teamName: \"\",\r\n      leagueID: \"\", //holding league id for each user\r\n      formUpdated: false,\r\n      confirmDelete: false,\r\n    };\r\n  }\r\n\r\n  //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n  //the database and push them into the state.\r\n  async componentDidMount() {\r\n    if (!this.props.create) {\r\n      //obtain current user data from database and push into state\r\n      const url = \"/users/\" + this.props.userId;\r\n      const res = await fetch(url);\r\n      const json = await res.json();\r\n      const userData = JSON.parse(json);\r\n      this.origAccountInfo = userData; //This determines whether update can occur\r\n      this.origAccountInfo.passwordRepeat = userData.password;\r\n      this.setState({\r\n        accountName: this.props.userId,\r\n        displayName: userData.displayName,\r\n        profilePicURL: userData.profilePicURL,\r\n        password: userData.password,\r\n        passwordRepeat: userData.password,\r\n        securityQuestion: userData.securityQuestion,\r\n        securityAnswer: userData.securityAnswer,\r\n        phoneNumber: userData.phoneNumber,\r\n        teamName: userData.teamName,\r\n        leagueID: userData.leagueID,\r\n      });\r\n    }\r\n  }\r\n\r\n  //checkDataValidity -- Callback function invoked after a form element in\r\n  //the 'Create Account' dialog box changes and component state has been\r\n  //updated. We first check whether the passwords match. If they do not,\r\n  //we set a custom validity message to be displayed when the user clicks the\r\n  //'Create Account' button. Otherwise, we reset the custom validity message\r\n  //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n  //Second, we check whether anything in the form changed from the original.\r\n  //If so, we update the 'formUpdated' state var, so that the form's submit\r\n  //button is enabled.\r\n  checkDataValidity = () => {\r\n    if (this.state.password != this.state.passwordRepeat) {\r\n      //Passwords don't match\r\n      this.repeatPassRef.current.setCustomValidity(\r\n        \"This password must match password entered in previous field.\"\r\n      );\r\n    } else {\r\n      this.repeatPassRef.current.setCustomValidity(\"\");\r\n    }\r\n  };\r\n\r\n  //handleChange--Called when a field in a dialog box form changes.\r\n  handleChange = (event) => {\r\n    const formUpdated =\r\n      this.origAccountInfo == null\r\n        ? true\r\n        : this.formIsUpdated(event.target.name, event.target.value);\r\n    if (event.target.name === \"profilePic\") {\r\n      if (event.target.value.length == 0) {\r\n        //The user canceled the file selection -- set back to default\r\n        this.setState(\r\n          {\r\n            profilePicURL:\r\n              \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n            formUpdated: formUpdated,\r\n          },\r\n          this.checkDataValidity\r\n        );\r\n      } else {\r\n        //The user selected a file\r\n        const self = this;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n        reader.addEventListener(\"load\", function () {\r\n          self.setState(\r\n            { profilePicURL: this.result, formUpdated: formUpdated },\r\n            this.checkDataValidity\r\n          );\r\n        });\r\n      }\r\n    } else {\r\n      this.setState(\r\n        { [event.target.name]: event.target.value, formUpdated: formUpdated },\r\n        this.checkDataValidity\r\n      );\r\n    }\r\n  };\r\n\r\n  //formisUpdated-- Checks whether any form data element has changed from the original. If so,\r\n  //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n  //true since this.origAccountInfo is set to null.\r\n  //Should be called whenever the user makes a change to form data.\r\n  formIsUpdated = (updateField, updateVal) => {\r\n    if (this.origAccountInfo[updateField] != updateVal) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"displayName\" &&\r\n      this.state.displayName != this.origAccountInfo.displayName\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"profilePicURL\" &&\r\n      this.state.profilePicURL != this.origAccountInfo.profilePicURL\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"password\" &&\r\n      this.state.password !== this.origAccountInfo.password\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"passwordRepeat\" &&\r\n      this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"securityQuestion\" &&\r\n      this.state.securityQuestion !== this.origAccountInfo.securityQuestion\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"securityAnswer\" &&\r\n      this.state.securityAnswer !== this.origAccountInfo.securityAnswer\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"phoneNumber\" &&\r\n      this.state.phoneNumber !== this.origAccountInfo.phoneNumber\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"teamName\" &&\r\n      this.state.teamName !== this.origAccountInfo.teamName\r\n    ) {\r\n      return true;\r\n    }\r\n    if (\r\n      updateField != \"leagueID\" &&\r\n      this.state.leagueID !== this.origAccountInfo.leagueID\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n  //Sets default value of display name to value entered into Email field\r\n  //as a courtesy.\r\n  setDefaultDisplayName = (event) => {\r\n    if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n      this.setState({ displayName: event.target.value });\r\n    }\r\n  };\r\n\r\n  //handleSubmit -- Triggered when user clicks on submit button to\r\n  //either create or edit account.\r\n  //Custom data checking ensures user account under this email does not\r\n  //already exist and that the rest of the info is valid. We create a new\r\n  // object for user, save it to localStorage and take user to app's\r\n  //landing page.\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    //Initialize user account\r\n    let userData = {\r\n      displayName: this.state.displayName,\r\n      password: this.state.password,\r\n      profilePicURL: this.state.profilePicURL,\r\n      securityQuestion: this.state.securityQuestion,\r\n      securityAnswer: this.state.securityAnswer,\r\n      phoneNumber: this.state.phoneNumber,\r\n      teamName: this.state.teamName,\r\n      leagueID: this.state.leagueID,\r\n    };\r\n    const url = \"/users/\" + this.state.accountName;\r\n    let res;\r\n    if (this.props.create) {\r\n      //use POST route to create new user account\r\n      res = await fetch(url, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify(userData),\r\n      });\r\n      if (res.status == 200) {\r\n        //successful account creation!\r\n        this.props.done(\r\n          \"New account created! Enter credentials to log in.\",\r\n          false\r\n        );\r\n      } else {\r\n        //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.props.done(resText, false);\r\n      }\r\n    } else {\r\n      //use PUT route to update existing user account\r\n      res = await fetch(url, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"PUT\",\r\n        body: JSON.stringify(userData),\r\n      });\r\n      if (res.status == 200) {\r\n        //successful account creation!\r\n        this.props.done(\"User Account Updated!\", false);\r\n      } else {\r\n        //Unsuccessful account update\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.props.done(resText, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  //deleteAccount -- Called after confirms account deletion.\r\n  //Uses DELETE server route to perform server deletion.\r\n  //Calls on done with status message and\r\n  //true if delete was succesful, false otherwise.\r\n  deleteAccount = async () => {\r\n    const url = \"/users/\" + this.state.accountName;\r\n    const res = await fetch(url, { method: \"DELETE\" });\r\n    if (res.status == 200) {\r\n      //successful account deletion!\r\n      this.props.done(\r\n        \"Account '\" + this.state.accountName + \"' has been deleted.\",\r\n        true\r\n      );\r\n    } else {\r\n      //Unsuccessful account deletion\r\n      //Grab textual error message\r\n      const resText = await res.text();\r\n      this.props.done(resText, false);\r\n    }\r\n    this.setState({ confirmDelete: false });\r\n  };\r\n\r\n  //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n  //button to indicate intention to delete account. Presents the Confirm\r\n  //Delete dialog box.\r\n  confirmDeleteAccount = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ confirmDelete: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n          <div className=\"modal-header\">\r\n            <h3>\r\n              <b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b>\r\n            </h3>\r\n            <button className=\"modal-close\" onClick={this.props.cancel}>\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label>\r\n                Email:\r\n                <input\r\n                  autocomplete=\"off\"\r\n                  disabled={!this.props.create}\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"accountName\"\r\n                  type=\"email\"\r\n                  size=\"35\"\r\n                  placeholder=\"Enter Email Address\"\r\n                  pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                  required={true}\r\n                  ref={this.newUserRef}\r\n                  value={this.state.accountName}\r\n                  onChange={this.handleChange}\r\n                  onBlur={this.setDefaultDisplayName}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Password:\r\n                <input\r\n                  autocomplete=\"off\"\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  size=\"35\"\r\n                  placeholder=\"Enter Password\"\r\n                  required={true}\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Repeat Password:\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"passwordRepeat\"\r\n                  type=\"password\"\r\n                  size=\"35\"\r\n                  placeholder=\"Repeat Password\"\r\n                  required={true}\r\n                  ref={this.repeatPassRef}\r\n                  value={this.state.passwordRepeat}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Display Name:\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"displayName\"\r\n                  type=\"text\"\r\n                  size=\"30\"\r\n                  placeholder=\"Display Name\"\r\n                  required={true}\r\n                  value={this.state.displayName}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Profile Picture:\r\n                <br />\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"profilePic\"\r\n                  type=\"file\"\r\n                  accept=\"image/x-png,image/gif,image/jpeg\"\r\n                  ref={this.profilePicRef}\r\n                  value={this.state.profilePic}\r\n                  onChange={this.handleChange}\r\n                />\r\n                <img\r\n                  src={\r\n                    this.state.profilePicURL != \"\"\r\n                      ? this.state.profilePicURL\r\n                      : this.state.profilePicDataURL\r\n                  }\r\n                  height=\"60\"\r\n                  width=\"60\"\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Security Question:\r\n                <textarea\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"securityQuestion\"\r\n                  size=\"35\"\r\n                  placeholder=\"Security Question\"\r\n                  rows=\"2\"\r\n                  cols=\"35\"\r\n                  maxLength=\"100\"\r\n                  required={true}\r\n                  value={this.state.securityQuestion}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"securityAnswer\"\r\n                  type=\"text\"\r\n                  placeholder=\"Answer\"\r\n                  rows=\"2\"\r\n                  cols=\"35\"\r\n                  maxLength=\"100\"\r\n                  required={true}\r\n                  value={this.state.securityAnswer}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Phone Number:\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"phoneNumber\"\r\n                  type=\"text\"\r\n                  size=\"35\"\r\n                  placeholder=\"Phone Number\"\r\n                  required={true}\r\n                  value={this.state.phoneNumber}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Team Name:\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"teamName\"\r\n                  type=\"text\"\r\n                  placeholder=\"Team Name\"\r\n                  size=\"35\"\r\n                  required={true}\r\n                  value={this.state.teamName}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <br />\r\n              <label>\r\n                League ID:\r\n                <input\r\n                  className=\"form-control form-text form-center\"\r\n                  name=\"leagueID\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter 0 if not yet in a league\"\r\n                  size=\"35\"\r\n                  required={true}\r\n                  value={this.state.leagueID}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              {!this.props.create ? (\r\n                <button\r\n                  className=\"btn btn-small btn-danger\"\r\n                  onClick={this.confirmDeleteAccount}\r\n                >\r\n                  Delete Account...\r\n                </button>\r\n              ) : null}\r\n              <br />\r\n              <br />\r\n              <button\r\n                role=\"submit\"\r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\"\r\n              >\r\n                <span\r\n                  className={\r\n                    this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"\r\n                  }\r\n                ></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        {this.state.confirmDelete ? (\r\n          <ConfirmDeleteAccount\r\n            email={this.state.accountName}\r\n            deleteAccount={this.deleteAccount}\r\n            close={() => this.setState({ confirmDelete: false })}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateEditAccountDialog;\r\n","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from \"react\";\r\nimport CreateEditAccountDialog from \"./CreateEditAccountDialog.js\";\r\nimport ResetPasswordDialog from \"./ResetPasswordDialog.js\";\r\nimport LookUpAccountDialog from \"./LookUpAccountDialog.js\";\r\nimport SecurityQuestionDialog from \"./SecurityQuestionDialog.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {\r\n      statusMsg: \"\",\r\n      loginBtnIcon: \"fa fa-sign-in\",\r\n      loginBtnLabel: \"Log In\",\r\n      showLookUpAccountDialog: false,\r\n      showSecurityQuestionDialog: false,\r\n      showResetPaswordDialog: false,\r\n      githubIcon: \"fa fa-github\",\r\n      githubLabel: \"Sign in with GitHub\",\r\n      googleIcon: \"fa fa-google\",\r\n      googleLabel: \"Sign in with Google\",\r\n      loginMsg: \"\",\r\n      newAccountCreated: false,\r\n    };\r\n  }\r\n\r\n  //Focus cursor in email input field when mounted\r\n  componentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n  }\r\n\r\n  //handleLoginSubmit -- Called when user clicks on login button.\r\n  handleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n      loginBtnLabel: \"Logging In...\",\r\n    });\r\n    const url =\r\n      \"auth/login?username=\" +\r\n      this.emailInputRef.current.value +\r\n      \"&password=\" +\r\n      this.passwordInputRef.current.value;\r\n    const res = await fetch(url, { method: \"POST\" });\r\n    if (res.status == 200) {\r\n      //successful login!\r\n      window.open(\"/\", \"_self\");\r\n    } else {\r\n      //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({\r\n        loginBtnIcon: \"fa fa-sign-in\",\r\n        loginBtnLabel: \"Log In\",\r\n        statusMsg: resText,\r\n      });\r\n    }\r\n  };\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when\r\n  //user attempted to create new account. Hide the dialog and display\r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n    this.setState({ statusMsg: msg, showCreateAccountDialog: false });\r\n  };\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n    this.setState({ showCreateAccountDialog: false });\r\n  };\r\n\r\n  //cancelResetPassword -- Called by one of the child three child dialog box components when\r\n  //the user decides to cancel resetting their password. Toggles state so that all three\r\n  //of the dialog boxes are hidden\r\n  cancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({\r\n      showLookUpAccountDialog: false,\r\n      showSecurityQuestionDialog: false,\r\n      showResetPaswordDialog: false,\r\n    });\r\n  };\r\n\r\n  //handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n  //provider\r\n  handleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`, \"_self\");\r\n  };\r\n\r\n  //handleOAuthLoginClick -- Called whent the user clicks on button to\r\n  //authenticate via a third-party OAuth service. The name of the provider is\r\n  //passed in as a parameter.\r\n  handleOAuthLoginClick = (provider) => {\r\n    this.setState({\r\n      [provider + \"Icon\"]: \"fa fa-spin fa-spinner\",\r\n      [provider + \"Label\"]: \"Connecting...\",\r\n    });\r\n    setTimeout(() => this.handleOAuthLogin(provider), 1000);\r\n  };\r\n\r\n  //getSecurityAnswer: Given the id, security question, and security answer obtained\r\n  //from the LookUpAccountDialog component, update state such that the user will\r\n  //next be prompted to enter security question and answer for verification\r\n  getSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({\r\n      showLookUpAccountDialog: false,\r\n      showSecurityQuestionDialog: true,\r\n    });\r\n  };\r\n\r\n  //getNewPassword-- Called after user successfully provides correct answer\r\n  //to security question. Presents the \"Reset Password\" dialog box.\r\n  getNewPassword = () => {\r\n    this.setState({\r\n      showSecurityQuestionDialog: false,\r\n      showResetPaswordDialog: true,\r\n    });\r\n  };\r\n\r\n  //resetPassword--Called after the user successfully enters a new (acceptable)\r\n  //password. pw contains the new password. Call on the Update (PUT) server\r\n  //route to update the user's password in the database.\r\n  resetPassword = async (pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify({ password: pw }),\r\n    });\r\n    if (res.status == 200) {\r\n      //successful update creation!\r\n      this.setState({\r\n        showResetPaswordDialog: false,\r\n        statusMsg: \"Password successfully reset!\",\r\n      });\r\n    } else {\r\n      //Unsuccessful account creation\r\n      //Grab textual error message\r\n      const resText = await res.text();\r\n      this.setState({ showResetPasswordDialog: false, statusMsg: resText });\r\n    }\r\n  };\r\n\r\n  //newAccountCreated -- Called after successful creation of a new account\r\n  accountCreateDone = (msg, deleted) => {\r\n    this.setState({ statusMsg: msg, showCreateAccountDialog: false });\r\n  };\r\n\r\n  //closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\n  closeStatusMsg = () => {\r\n    this.setState({ statusMsg: \"\" });\r\n  };\r\n\r\n  //cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\n  cancelCreateAccount = () => {\r\n    this.setState({ showCreateAccountDialog: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <center>\r\n          {this.state.statusMsg != \"\" ? (\r\n            <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                <span className=\"fa fa-times\"></span>\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n          {this.state.showLookUpAccountDialog ? (\r\n            <LookUpAccountDialog\r\n              cancelResetPassword={this.cancelResetPassword}\r\n              getSecurityAnswer={this.getSecurityAnswer}\r\n            />\r\n          ) : null}\r\n          {this.state.showSecurityQuestionDialog ? (\r\n            <SecurityQuestionDialog\r\n              cancelResetPassword={this.cancelResetPassword}\r\n              question={this.resetQ}\r\n              answer={this.resetA}\r\n              getNewPassword={this.getNewPassword}\r\n            />\r\n          ) : null}\r\n          {this.state.showResetPaswordDialog ? (\r\n            <ResetPasswordDialog\r\n              cancelResetPassword={this.cancelResetPassword}\r\n              resetPassword={this.resetPassword}\r\n            />\r\n          ) : null}\r\n          <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n              Email:\r\n              <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n              />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n              Password:\r\n              <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                id=\"passwordInput\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n              />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn-color-theme btn btn-primary btn-block login-btn\"\r\n            >\r\n              <span id=\"login-btn-icon\" className={this.state.loginBtnIcon} />\r\n              &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-link login-link\"\r\n                onClick={() => {\r\n                  this.setState({ showCreateAccountDialog: true });\r\n                }}\r\n              >\r\n                Create an account\r\n              </button>{\" \"}\r\n              |\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-link login-link\"\r\n                onClick={() => {\r\n                  this.setState({ showLookUpAccountDialog: true });\r\n                }}\r\n              >\r\n                Reset your password\r\n              </button>\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-github\"\r\n              onClick={() => this.handleOAuthLoginClick(\"github\")}\r\n            >\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n              {this.state.githubLabel}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              id=\"googleBtn\"\r\n              className=\"btn btn-google\"\r\n              onClick={() => this.handleOAuthLoginClick(\"google\")}\r\n            >\r\n              <span className={this.state.googleIcon}></span>&nbsp;\r\n              {this.state.googleLabel}\r\n            </button>\r\n          </form>\r\n          {this.state.showCreateAccountDialog ? (\r\n            <CreateEditAccountDialog\r\n              create={true}\r\n              done={this.accountCreateDone}\r\n              cancel={this.cancelCreateAccount}\r\n            />\r\n          ) : null}\r\n          {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\n// My Teams page, instead of Feed\r\nclass FeedPage extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      players: [],\r\n    };\r\n  }\r\n\r\n  populateForm = () => {\r\n    //ToDo: populate selection forms\r\n    // sort by position\r\n    //have starters be the initial value\r\n  };\r\n\r\n  //componentDidMount\r\n  componentDidMount = async () => {\r\n    let response = await fetch(\"/users/\" + this.props.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    console.log(obj.players);\r\n    this.setState({\r\n      players: obj.players,\r\n    });\r\n    this.populateForm();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <center>\r\n          <form>\r\n            <label>\r\n              QB\r\n              <select>\r\n                <option>{/* all available qbs*/}</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label>\r\n              WR\r\n              <select>\r\n                <option>{/* all available wrs*/}</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label>\r\n              RB\r\n              <select>\r\n                <option>{/* all available wrs*/}</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label>\r\n              K\r\n              <select>\r\n                <option>{/* all available wrs*/}</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label>\r\n              D\r\n              <select>\r\n                <option>{/* all available qbs*/}</option>\r\n              </select>\r\n            </label>\r\n          </form>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedPage;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from \"react\";\r\nimport ConfirmDeleteRound from \"./ConfirmDeleteRound.js\";\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass RoundsTable extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { showConfirmDelete: false };\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  };\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  //ToDo: dont need delete anymore\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({ showConfirmDelete: false });\r\n  };\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that\r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  //ToDo: dont need delete anymore\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({ showConfirmDelete: true });\r\n  };\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  //ToDo: populate table with game information instead of round info\r\n  renderTable = () => {\r\n    let table = [];\r\n    for (let r = 0; r < this.props.games.length; ++r) {\r\n      table.push(\r\n        <tr key={r}>\r\n          <td>{this.props.games[r].managerId}</td>\r\n          <td>{this.props.games[r].score}</td>\r\n          <td>{this.props.games[r].week}</td>\r\n          <td>{this.props.games[r].leagueId}</td>\r\n          <td>{this.props.games[r].score}</td>\r\n        </tr>\r\n      );\r\n    }\r\n    return table;\r\n  };\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  //ToDo: change table headers to match issue\r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <h1></h1>\r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Team Name</th>\r\n              <th>Match Up</th>\r\n              <th>History</th>\r\n              <th>League</th>\r\n              <th>Record</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.props.games).length === 0 ? (\r\n              <tr>\r\n                <td colSpan=\"5\" style={{ fontStyle: \"italic\" }}>\r\n                  No data to show\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              this.renderTable()\r\n            )}\r\n          </tbody>\r\n        </table>\r\n        {this.state.showConfirmDelete ? (\r\n          <ConfirmDeleteRound\r\n            close={() => this.setState({ showConfirmDelete: false })}\r\n            deleteRound={this.deleteRound}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        games={this.props.userObj.games}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    {/* <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} /> */}\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","import React from \"react\";\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass CoursesTable extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  //populates table with league information\r\n  renderTable = () => {\r\n    let table = [];\r\n    for (let r = 0; r < this.props.league.length; ++r) {\r\n      table.push(\r\n        <tr key={r}>\r\n          <td>{this.props.league[r].users.teamName}</td>\r\n          <td>{this.props.league[r].users.win}</td>\r\n          <td>{this.props.league[r].users.loss}</td>\r\n          <td>{this.props.league[r].users.displayName}</td>\r\n        </tr>\r\n      );\r\n    }\r\n    return table;\r\n  };\r\n\r\n  //populates the table with headers and data from rendertable\r\n  //if not in league will prompt to join one\r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <h1></h1>\r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Team Name</th>\r\n              <th>Wins</th>\r\n              <th>Losses</th>\r\n              <th>Display Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.props.league).length === 0 ? (\r\n              <tr>\r\n                <td colSpan=\"5\" style={{ fontStyle: \"italic\" }}>\r\n                  No data to show. Not in a league\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              this.renderTable()\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoursesTable;\r\n","import React from \"react\";\r\nimport CoursesTable from './CoursesTable';\r\nimport AppMode from './../AppMode.js';\r\n// THis now becomes \"Leage\" instead of Courses\r\nclass CoursesPage extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  //need to add a function that fills the table with current league data\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <center>\r\n          <h1>League Page</h1>\r\n          <h2>{this.props.userObj.league.LeagueName}</h2>\r\n        </center>\r\n        <CoursesTable\r\n          league={this.props.userObj.league}\r\n          changeMode={this.props.changeMode}\r\n          menuOpen={this.props.menuOpen} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoursesPage;\r\n","import React from \"react\";\r\nimport CSVReader from \"react-csv-reader\";\r\nclass DraftPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.parsedata = [];\r\n    this.fileInfo = [];\r\n    this.leagueName = \"\";\r\n    this.state = {\r\n            playersData: []\r\n    };\r\n  }\r\n\r\n  parseOptions = (data, info) => {\r\n    console.log(data);\r\n    console.log(info);\r\n    this.parsedata = data;\r\n\r\n    this.setState({playersData: data});\r\n\r\n    this.fileInfo = info;\r\n  };\r\n\r\n  addPlayers = async (newData) => {\r\n    const url = '/games/addplayers/' + this.props.userObj.id;\r\n    const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(newData)}); \r\n    const msg = await res.text();\r\n    if (res.status != 200) {\r\n        this.setState({errorMsg: msg});\r\n        //this.props.changeMode(AppMode.ROUNDS);\r\n    } else {\r\n        this.setState({errorMsg: \"\"});\r\n        //this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      //ToDo\r\n      // Parse .csv and populate a table of all available players.\r\n      // Create a form for: league name, some basic league settings, upload file button\r\n      // Upon submit, make that user a commissioner in the db\r\n      // Update user in database with players\r\n      <div className=\"padded-page\">\r\n        {/* <button className=\"modal-close\" onClick={this.props.close}>\r\n          &times;\r\n        </button> */}\r\n        {/* <center> */}\r\n          {/* <form className=\"padded-page\" onSubmit={this.handleSubmit}> */}\r\n            <center>\r\n              <label>\r\n                League Name:\r\n                <input\r\n                  name=\"leagueName\"\r\n                  id=\"leagueName\"\r\n                  className=\"form-control form-center\"\r\n                  type=\"text\"\r\n                  onChange={this.handleChange}\r\n                  placeholder=\"League Name\"\r\n                  value={this.leagueName}\r\n                  size=\"50\"\r\n                  maxLength=\"50\"\r\n                />\r\n              </label>\r\n              <p></p>\r\n              <label>\r\n                Format:\r\n                <select\r\n                  name=\"format\"\r\n                  id=\"leagueFormat\"\r\n                  className=\"form-control form-center\"\r\n                  onChange={this.handleChange}\r\n                >\r\n                  <option value=\"full\">Full PPR</option>\r\n                  <option value=\"half\">Half PPR</option>\r\n                </select>\r\n              </label>\r\n              <p></p>\r\n              <CSVReader\r\n                onFileLoaded={(data, fileInfo) => this.parseOptions(data, fileInfo)}\r\n              />   \r\n              <br></br>           \r\n              <button\r\n                type=\"submit\" \r\n                id=\"SubmitTeamBtn\"\r\n                onClick={this.addPlayers(this.state.playersData)}\r\n                // style={{ width: \"70%\", fontSize: \"36px\" }}\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"draft-btn-icon\"/>\r\n                &nbsp;Submit Team\r\n\r\n                </button>\r\n            </center>\r\n          {/* </form> */}\r\n        {/* </center> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DraftPage;\r\n","// ToDo:\r\n// display user information such as:\r\n// achievements\r\n// team name\r\n// display name\r\n// etc.\r\nimport React from \"react\";\r\n\r\nclass ProfilePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <center></center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfilePage;\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar.js\";\r\nimport SideMenu from \"./SideMenu.js\";\r\nimport ModeBar from \"./ModeBar.js\";\r\nimport CreateEditAccountDialog from \"./CreateEditAccountDialog.js\";\r\nimport LoginPage from \"./LoginPage.js\";\r\nimport AppMode from \"./../AppMode.js\";\r\nimport FeedPage from \"./FeedPage.js\";\r\nimport Rounds from \"./Rounds.js\";\r\nimport CoursesPage from \"./CoursesPage.js\";\r\nimport Draft from \"./Draft.js\";\r\nimport ProfilePage from \"./ProfilePage\";\r\n\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Fantasy Football\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Game History\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Game\";\r\n//todo: remove ability to edit rounds\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.DRAFT] = \"Draft\";\r\nmodeTitle[AppMode.PROFILE] = \"Profile\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.DRAFT] = Draft;\r\nmodeToPage[AppMode.PROFILE] = ProfilePage;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      mode: AppMode.LOGIN,\r\n      menuOpen: false,\r\n      authenticated: false,\r\n      userObj: { displayName: \"\", profilePicURL: \"\" },\r\n      editAccount: false,\r\n      showEditAccountDialog: false,\r\n      statusMsg: \"\",\r\n      showAboutDialog: false,\r\n      showDraftDialog: false,\r\n    };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) {\r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED, //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in\r\n  //the database. The function calls the users/:userid (GET) route to update\r\n  //the userObj state var based on the latest database changes, and sets the\r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to\r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async (newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode,\r\n    });\r\n  };\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({ mode: newMode });\r\n  };\r\n\r\n  openMenu = () => {\r\n    this.setState({ menuOpen: true });\r\n  };\r\n\r\n  closeMenu = () => {\r\n    this.setState({ menuOpen: false });\r\n  };\r\n\r\n  openDraft = () => {\r\n    this.setState({ showDraftDialog: true });\r\n  };\r\n\r\n  closeDraft = () => {\r\n    this.setState({ showDraftDialog: false });\r\n  };\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState((prevState) => ({ menuOpen: !prevState.menuOpen }));\r\n  };\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({ userId: Id, authenticated: true });\r\n  };\r\n\r\n  showEditAccount = () => {\r\n    this.setState({ showEditAccountDialog: true });\r\n  };\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({ showEditAccountDialog: false });\r\n  };\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({\r\n        showEditAccountDialog: false,\r\n        statusMsg: msg,\r\n        mode: AppMode.LOGIN,\r\n      });\r\n    } else {\r\n      this.setState({ showEditAccountDialog: false, statusMsg: msg });\r\n    }\r\n  };\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({ statusMsg: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {/* {this.state.showAboutDialog ? (\r\n          <AboutBox close={() => this.setState({ showAboutDialog: false })} />\r\n        ) : null} */}\r\n        {this.state.showDraftDialog ? (\r\n          <Draft close={this.closeDraft} userObj={this.state.userObj} />\r\n        ) : null}\r\n        {this.state.statusMsg != \"\" ? (\r\n          <div className=\"status-msg\">\r\n            <span>{this.state.statusMsg}</span>\r\n            <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n              <span className=\"fa fa-times\"></span>\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n        {this.state.showEditAccountDialog ? (\r\n          <CreateEditAccountDialog\r\n            create={false}\r\n            userId={this.state.userObj.id}\r\n            done={this.editAccountDone}\r\n            cancel={this.cancelEditAccount}\r\n          />\r\n        ) : null}\r\n        <NavBar\r\n          title={modeTitle[this.state.mode]}\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n        />\r\n        <SideMenu\r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n          displayName={this.state.userObj.displayName}\r\n          profilePicURL={this.state.userObj.profilePicURL}\r\n          localAccount={this.state.userObj.authStrategy === \"local\"}\r\n          editAccount={this.showEditAccount}\r\n          logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n          showAbout={() => {\r\n            this.setState({ showAboutDialog: true });\r\n          }}\r\n          openDraft={this.openDraft}\r\n          changeMode={this.handleChangeMode}\r\n        />\r\n        <ModeBar\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n        />\r\n        <ModePage\r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          userObj={this.state.userObj}\r\n          refreshOnUpdate={this.refreshOnUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}